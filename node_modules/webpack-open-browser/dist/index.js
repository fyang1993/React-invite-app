"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.WebpackOpenBrowser = void 0;
var open_1 = __importDefault(require("open"));
function once(fn) {
    var called = false;
    function enhancedFn() {
        var args = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            args[_i] = arguments[_i];
        }
        if (!called) {
            called = true;
            fn.apply(this, args);
        }
    }
    return enhancedFn;
}
function openBrowser(_a) {
    var url = _a.url, browser = _a.browser, _b = _a.delay, delay = _b === void 0 ? 0 : _b;
    setTimeout(function () {
        if (browser) {
            open_1.default(url, { app: browser });
        }
        else {
            open_1.default(url);
        }
    }, delay);
}
var WebpackOpenBrowser = (function () {
    function WebpackOpenBrowser(options) {
        this.options = options;
        this.isWatchModel = false;
        var checkOption = function (option) {
            var isObject = option !== null && (typeof option === 'object' || typeof option === 'function');
            if (!isObject) {
                throw new TypeError('Option item must be object!');
            }
            if (!option.url) {
                throw new TypeError('You must specific the url to open!');
            }
        };
        if (Array.isArray(options)) {
            options.forEach(checkOption);
        }
        else {
            checkOption(options);
        }
    }
    WebpackOpenBrowser.prototype.apply = function (compiler) {
        var _this = this;
        compiler.hooks.watchRun.tap('adjust-whether-watch-mode', function () {
            _this.isWatchModel = true;
        });
        var handler = function (stats) {
            if (_this.isWatchModel) {
                var callback = function (option) {
                    if (!stats.hasErrors() || option.ignoreErrors) {
                        openBrowser(option);
                    }
                };
                if (Array.isArray(_this.options)) {
                    _this.options.forEach(callback);
                }
                else {
                    callback(_this.options);
                }
            }
        };
        compiler.hooks.done.tap('webpack-open-browser', once(handler));
    };
    return WebpackOpenBrowser;
}());
exports.WebpackOpenBrowser = WebpackOpenBrowser;
exports.default = WebpackOpenBrowser;
